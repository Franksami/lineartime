name: 🏛️ Design System Governance

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  push:
    branches: [feature/*, develop]
  workflow_dispatch:
    inputs:
      governance_level:
        description: 'Governance validation level'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - comprehensive
          - enterprise

env:
  NODE_VERSION: '18'
  GOVERNANCE_LEVEL: ${{ github.event.inputs.governance_level || 'standard' }}

jobs:
  # Pre-governance validation
  pre-governance:
    name: 📋 Pre-Governance Setup
    runs-on: ubuntu-latest
    outputs:
      should-run-governance: ${{ steps.check-changes.outputs.should-run }}
      governance-level: ${{ steps.determine-level.outputs.level }}
      
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: 🔍 Check Changes
        id: check-changes
        run: |
          # Check if governance-related files changed
          if git diff --name-only HEAD~1 | grep -E "(design-tokens|components|lib/design-system|scripts)" > /dev/null; then
            echo "should-run=true" >> $GITHUB_OUTPUT
          else
            echo "should-run=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 🎯 Determine Governance Level
        id: determine-level
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]] && [[ "${{ github.base_ref }}" == "main" ]]; then
            echo "level=comprehensive" >> $GITHUB_OUTPUT
          elif [[ "$GOVERNANCE_LEVEL" == "enterprise" ]]; then
            echo "level=enterprise" >> $GITHUB_OUTPUT
          else
            echo "level=standard" >> $GITHUB_OUTPUT
          fi

  # Design Token Governance
  token-governance:
    name: 🎨 Design Token Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: 🎨 Token Validation
        run: |
          echo "🔍 Validating design tokens..."
          npm run tokens:validate
          
      - name: 🧮 Token Coverage Analysis
        run: |
          echo "📊 Analyzing token coverage..."
          node scripts/token-coverage-analysis.js
          
      - name: 🎯 Hardcoded Value Detection
        run: |
          echo "🕵️ Detecting hardcoded design values..."
          npm run ci:guard
          
      - name: 📈 Token Usage Report
        run: |
          echo "📋 Generating token usage report..."
          node scripts/generate-token-report.js
          
      - name: 💾 Upload Token Report
        uses: actions/upload-artifact@v4
        with:
          name: token-governance-report
          path: reports/token-*.json
          retention-days: 30

  # Accessibility Governance
  accessibility-governance:
    name: ♿ Accessibility Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: ♿ Accessibility Compliance Check
        run: |
          echo "🔍 Running accessibility governance..."
          node scripts/accessibility-check.js
          
      - name: 🌈 Contrast Ratio Validation
        run: |
          echo "🎨 Validating color contrast ratios..."
          npx playwright test tests/accessibility-aaa-compliance.spec.ts --project=chromium
          
      - name: ⌨️ Keyboard Navigation Test
        run: |
          echo "⌨️ Testing keyboard navigation..."
          npx playwright test tests/accessibility-compliance.spec.ts --project=chromium --grep "keyboard"
          
      - name: 📱 Screen Reader Compatibility
        run: |
          echo "📢 Validating screen reader compatibility..."
          npx playwright test tests/accessibility-aaa-compliance.spec.ts --project=chromium --grep "aria"
          
      - name: 📊 Accessibility Report
        if: always()
        run: |
          echo "📋 Generating accessibility report..."
          node scripts/generate-accessibility-report.js

  # Performance Governance
  performance-governance:
    name: ⚡ Performance Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: 🏗️ Build with Analysis
        run: |
          echo "🔨 Building with bundle analysis..."
          npm run build:analyze
          
      - name: ⚡ Performance Budget Check
        run: |
          echo "💰 Checking performance budgets..."
          node scripts/performance-check.js
          
      - name: 📊 Core Web Vitals Validation
        run: |
          echo "🎯 Validating Core Web Vitals..."
          npx playwright test tests/performance-improved.spec.ts --project=chromium
          
      - name: 🧠 Memory Usage Analysis
        run: |
          echo "🧠 Analyzing memory usage..."
          npx playwright test tests/performance-improved.spec.ts --project=chromium --grep "memory"
          
      - name: 📈 Performance Report
        if: always()
        run: |
          echo "📋 Generating performance report..."
          node scripts/generate-performance-report.js

  # Motion System Governance
  motion-governance:
    name: 🎬 Motion System Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: 🎬 Motion System Validation
        run: |
          echo "🎭 Validating motion system..."
          node scripts/motion-check.js
          
      - name: ♿ Reduced Motion Compliance
        run: |
          echo "⚡ Testing reduced motion compliance..."
          npx playwright test tests/animation-performance.spec.ts --project=chromium --grep "reduced-motion"
          
      - name: ⚡ Animation Performance
        run: |
          echo "📈 Testing animation performance..."
          npx playwright test tests/animation-performance.spec.ts --project=chromium
          
      - name: 🌀 Vestibular Safety Check
        run: |
          echo "🏥 Checking vestibular safety..."
          node scripts/vestibular-safety-check.js

  # i18n Governance
  i18n-governance:
    name: 🌍 i18n Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: 🌍 i18n Completeness Check
        run: |
          echo "📝 Checking i18n completeness..."
          node scripts/i18n-check.js
          
      - name: ↔️ RTL Layout Validation
        run: |
          echo "📐 Validating RTL layouts..."
          npx playwright test tests/rtl-layout-support.spec.ts --project=chromium
          
      - name: 📅 Locale-aware Formatting
        run: |
          echo "🔢 Testing locale-aware formatting..."
          node scripts/locale-formatting-check.js
          
      - name: 🗂️ Translation Key Validation
        run: |
          echo "🔑 Validating translation keys..."
          node scripts/translation-key-check.js

  # Comprehensive Quality Assessment
  quality-assessment:
    name: 📊 Quality Assessment
    runs-on: ubuntu-latest
    needs: [token-governance, accessibility-governance, performance-governance, motion-governance, i18n-governance]
    if: always() && needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          
      - name: 🔧 Install Dependencies
        run: |
          npm install -g pnpm
          pnpm install
          
      - name: 📊 Generate Governance Report
        run: |
          echo "📋 Generating comprehensive governance report..."
          node scripts/generate-governance-report.js
          
      - name: 🎯 Calculate Governance Score
        id: governance-score
        run: |
          echo "🧮 Calculating overall governance score..."
          SCORE=$(node scripts/calculate-governance-score.js)
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "📊 Governance Score: $SCORE%"
          
      - name: 🚨 Quality Gate Enforcement
        run: |
          echo "🚦 Enforcing quality gates..."
          SCORE="${{ steps.governance-score.outputs.score }}"
          LEVEL="${{ needs.pre-governance.outputs.governance-level }}"
          
          case $LEVEL in
            "standard")
              THRESHOLD=75
              ;;
            "comprehensive")
              THRESHOLD=85
              ;;
            "enterprise")
              THRESHOLD=90
              ;;
          esac
          
          echo "Required threshold for $LEVEL: $THRESHOLD%"
          echo "Actual score: $SCORE%"
          
          if [ "$SCORE" -lt "$THRESHOLD" ]; then
            echo "❌ Quality gate failed! Score $SCORE% is below required $THRESHOLD%"
            exit 1
          else
            echo "✅ Quality gate passed! Score $SCORE% meets $LEVEL requirements"
          fi
          
      - name: 💾 Upload Governance Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: governance-reports
          path: |
            reports/governance-*.json
            reports/quality-*.html
          retention-days: 30

  # Security Governance
  security-governance:
    name: 🛡️ Security Governance
    runs-on: ubuntu-latest
    needs: pre-governance
    if: needs.pre-governance.outputs.should-run-governance == 'true'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🛡️ Dependency Security Audit
        run: |
          echo "🔍 Running security audit..."
          npm audit --audit-level=moderate
          
      - name: 🕵️ Vulnerability Scanning
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript,typescript
          
      - name: 🔐 Secrets Detection
        run: |
          echo "🔍 Scanning for exposed secrets..."
          # This would typically use a tool like truffleHog or git-secrets
          git log --oneline -100 | grep -i -E "(password|secret|key|token)" || echo "No obvious secrets found"

  # Rollback Management
  rollback-management:
    name: 🔄 Rollback Management
    runs-on: ubuntu-latest
    needs: [quality-assessment]
    if: failure() && github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🚨 Quality Gate Failure Notification
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `
            ## 🚨 Governance Quality Gates Failed
            
            The design system governance checks have failed. This PR cannot be merged until all quality gates pass.
            
            ### 🔍 What to check:
            - Review the failed jobs above for specific issues
            - Check the governance dashboard at /governance-dashboard
            - Ensure all design tokens are properly used
            - Verify accessibility compliance (WCAG AAA)
            - Check performance budgets and Core Web Vitals
            - Validate motion system compliance
            - Ensure i18n completeness
            
            ### 🛠️ How to fix:
            1. Run governance checks locally: \`npm run governance:check\`
            2. Fix identified issues
            3. Re-run tests: \`npm run test:all\`
            4. Push your fixes
            
            ### 📊 Governance Dashboard
            View detailed metrics at: [Governance Dashboard](/governance-dashboard)
            
            _This comment will be updated when you push new commits._
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: 🏷️ Add Quality Gate Label
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['governance:failed', 'needs-fixes']
            });

  # Success Notification
  governance-success:
    name: ✅ Governance Success
    runs-on: ubuntu-latest
    needs: [quality-assessment, security-governance]
    if: success()
    
    steps:
      - name: 🎉 Success Notification
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const comment = `
            ## ✅ Design System Governance Passed!
            
            All governance quality gates have passed successfully. This PR meets the design system standards.
            
            ### 📊 Quality Metrics:
            - 🎨 Design Tokens: ✅ Validated
            - ♿ Accessibility: ✅ WCAG AAA Compliant
            - ⚡ Performance: ✅ Within Budgets
            - 🎬 Motion System: ✅ Compliant
            - 🌍 i18n: ✅ Complete
            - 🛡️ Security: ✅ Secure
            
            ### 📈 View Reports:
            - [Governance Dashboard](/governance-dashboard)
            - Check workflow artifacts for detailed reports
            
            _Ready for code review and merge!_
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
      - name: 🏷️ Add Success Labels
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            // Remove failure labels if they exist
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'governance:failed'
              });
            } catch (e) {
              // Label might not exist
            }
            
            try {
              await github.rest.issues.removeLabel({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'needs-fixes'
              });
            } catch (e) {
              // Label might not exist
            }
            
            // Add success label
            github.rest.issues.addLabels({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['governance:passed', 'ready-for-review']
            });