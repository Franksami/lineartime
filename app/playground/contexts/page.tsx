'use client'

import { useState } from 'react'
import { SuperContextProvider, useSuperContext, useGlobalState, useGlobalActions, usePerformanceMetrics } from '@/contexts/SuperContext'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Progress } from '@/components/ui/progress'
import { 
  Settings, 
  Bell, 
  Calendar, 
  Brain, 
  Users,
  Zap,
  Activity,
  AlertCircle,
  CheckCircle,
  Clock,
  Database
} from 'lucide-react'

/**
 * SuperContext System Playground - 5-context architecture validation
 * Testing UI, Events, AI, Notifications, and Calendar contexts
 */

// Context testing component (must be inside SuperContextProvider)
function ContextTestingInner() {
  const { ui, events, ai, notifications, calendar, coordination } = useSuperContext()
  const globalState = useGlobalState()
  const globalActions = useGlobalActions()
  const performanceMetrics = usePerformanceMetrics()

  // Test state
  const [testProgress, setTestProgress] = useState(0)

  // Test functions
  const testUIContext = () => {
    ui.setTheme(ui.state.theme === 'light' ? 'dark' : 'light')
    ui.toggleSidebar()
    ui.openModal('eventModal')
    ui.announceMessage('UI Context test completed')
    setTestProgress(prev => prev + 20)
  }

  const testEventsContext = () => {
    const testEvent = {
      id: `test-event-${Date.now()}`,
      title: 'Test Event',
      startDate: new Date(),
      endDate: new Date(Date.now() + 3600000), // 1 hour later
      category: 'personal' as const,
      description: 'Generated by context testing'
    }
    
    events.addEvent(testEvent)
    events.setSearchQuery('test')
    events.updateSyncStatus('google', { status: 'syncing' })
    setTestProgress(prev => prev + 20)
  }

  const testAIContext = () => {
    ai.addSuggestion({
      id: `suggestion-${Date.now()}`,
      type: 'optimal_time',
      title: 'Schedule during focus hours',
      description: 'Based on your patterns, mornings work best for meetings',
      confidence: 0.8,
      action: 'dismiss'
    })
    
    ai.parseNaturalLanguage('Meeting with team tomorrow at 2pm')
    setTestProgress(prev => prev + 20)
  }

  const testNotificationsContext = () => {
    notifications.notify.success('Test Success', 'Notifications context working correctly')
    notifications.notify.warning('Test Warning', 'This is a test warning message')
    notifications.addAlert({
      level: 'medium',
      type: 'sync_error',
      title: 'Test Alert',
      message: 'This is a test system alert',
      actionRequired: false
    })
    setTestProgress(prev => prev + 20)
  }

  const testCoordination = async () => {
    await coordination.syncAllProviders()
    coordination.cleanup()
    setTestProgress(100)
  }

  const resetTests = () => {
    setTestProgress(0)
    notifications.dismissAllNotifications()
    ai.clearSuggestions()
    ui.closeModal('eventModal')
  }

  const contextStats = [
    {
      name: 'UI Context',
      icon: Settings,
      items: [
        `Theme: ${ui.state.theme}`,
        `Sidebar: ${ui.state.sidebarCollapsed ? 'Collapsed' : 'Expanded'}`,
        `Modals: ${Object.values(ui.state.modals).filter(Boolean).length} open`,
        `Loading: ${Object.values(ui.state.loading).filter(Boolean).length} active`
      ],
      status: 'working'
    },
    {
      name: 'Events Context',
      icon: Calendar,
      items: [
        `Events: ${events.state.events.length}`,
        `Filtered: ${events.state.filteredEvents.length}`,
        `Conflicts: ${events.state.conflicts.length}`,
        `Syncing: ${Object.values(events.state.syncStatus).filter(s => s.status === 'syncing').length} providers`
      ],
      status: 'working'
    },
    {
      name: 'AI Context',
      icon: Brain,
      items: [
        `Enabled: ${ai.state.enabled ? 'Yes' : 'No'}`,
        `Suggestions: ${ai.state.suggestions.length}`,
        `NLP Results: ${ai.state.nlpResults.length}`,
        `Processing: ${ai.state.nlpProcessing ? 'Yes' : 'No'}`
      ],
      status: 'working'
    },
    {
      name: 'Notifications',
      icon: Bell,
      items: [
        `Active: ${notifications.state.notifications.filter(n => !n.dismissed).length}`,
        `Alerts: ${notifications.state.alerts.filter(a => !a.resolved).length}`,
        `Critical: ${notifications.state.criticalAlerts.length}`,
        `Total: ${notifications.state.stats.totalNotifications}`
      ],
      status: 'working'
    }
  ]

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="space-y-2">
        <h1 className="text-3xl font-bold tracking-tight">
          SuperContext System Test
        </h1>
        <p className="text-muted-foreground">
          5-context architecture validation with cross-context coordination
        </p>
      </div>

      {/* Global State Overview */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5" />
            Global State Overview
          </CardTitle>
          <CardDescription>
            Current system state across all contexts
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            <div className="text-center p-4 border rounded-lg">
              <div className="font-semibold text-sm text-muted-foreground uppercase">
                Loading
              </div>
              <div className="text-lg font-bold mt-1 flex items-center justify-center gap-2">
                {globalState.isLoading ? (
                  <>
                    <div className="w-2 h-2 bg-yellow-500 rounded-full animate-pulse" />
                    Yes
                  </>
                ) : (
                  <>
                    <CheckCircle className="w-4 h-4 text-green-500" />
                    No
                  </>
                )}
              </div>
            </div>
            <div className="text-center p-4 border rounded-lg">
              <div className="font-semibold text-sm text-muted-foreground uppercase">
                Events
              </div>
              <div className="text-lg font-bold mt-1">{globalState.totalEvents}</div>
            </div>
            <div className="text-center p-4 border rounded-lg">
              <div className="font-semibold text-sm text-muted-foreground uppercase">
                Theme
              </div>
              <div className="text-lg font-bold mt-1">{globalState.theme}</div>
            </div>
            <div className="text-center p-4 border rounded-lg">
              <div className="font-semibold text-sm text-muted-foreground uppercase">
                AI Status
              </div>
              <div className="text-lg font-bold mt-1">
                {globalState.aiEnabled ? 'On' : 'Off'}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Test Controls */}
      <Card>
        <CardHeader>
          <CardTitle>Context Testing</CardTitle>
          <CardDescription>
            Test individual contexts and coordination
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <div className="flex items-center justify-between">
              <span>Test Progress</span>
              <Badge variant="outline">{testProgress}%</Badge>
            </div>
            <Progress value={testProgress} className="w-full" />
          </div>

          <Separator />

          <div className="grid grid-cols-2 md:grid-cols-3 gap-3">
            <Button 
              onClick={testUIContext}
              variant="outline"
              size="sm"
              className="justify-start"
            >
              <Settings className="w-4 h-4 mr-2" />
              Test UI Context
            </Button>
            <Button 
              onClick={testEventsContext}
              variant="outline"
              size="sm"
              className="justify-start"
            >
              <Calendar className="w-4 h-4 mr-2" />
              Test Events
            </Button>
            <Button 
              onClick={testAIContext}
              variant="outline"
              size="sm"
              className="justify-start"
            >
              <Brain className="w-4 h-4 mr-2" />
              Test AI Context
            </Button>
            <Button 
              onClick={testNotificationsContext}
              variant="outline"
              size="sm"
              className="justify-start"
            >
              <Bell className="w-4 h-4 mr-2" />
              Test Notifications
            </Button>
            <Button 
              onClick={testCoordination}
              variant="outline"
              size="sm"
              className="justify-start"
            >
              <Users className="w-4 h-4 mr-2" />
              Test Coordination
            </Button>
            <Button 
              onClick={resetTests}
              variant="destructive"
              size="sm"
              className="justify-start"
            >
              <AlertCircle className="w-4 h-4 mr-2" />
              Reset Tests
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Context Status Cards */}
      <div className="grid gap-6 md:grid-cols-2">
        {contextStats.map((context) => {
          const Icon = context.icon
          return (
            <Card key={context.name}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2">
                    <Icon className="w-5 h-5" />
                    {context.name}
                  </CardTitle>
                  <Badge 
                    variant={context.status === 'working' ? 'default' : 'destructive'}
                  >
                    {context.status === 'working' ? '✓ Working' : '✗ Error'}
                  </Badge>
                </div>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  {context.items.map((item, index) => (
                    <div key={index} className="text-sm text-muted-foreground">
                      {item}
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          )
        })}
      </div>

      {/* Performance Metrics */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Zap className="w-5 h-5" />
            Performance Metrics
          </CardTitle>
          <CardDescription>
            Context performance and memory usage
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-3">
            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Context Updates</span>
                <Badge variant="outline">{performanceMetrics.contextUpdateCount}</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Avg Update Time</span>
                <Badge variant="outline">{performanceMetrics.averageUpdateTime.toFixed(2)}ms</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Last Update</span>
                <Badge variant="outline">
                  {performanceMetrics.lastUpdateTime.toLocaleTimeString()}
                </Badge>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Events in Memory</span>
                <Badge variant="outline">{performanceMetrics.memoryUsage.events}</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">Notifications</span>
                <Badge variant="outline">{performanceMetrics.memoryUsage.notifications}</Badge>
              </div>
              <div className="flex items-center justify-between">
                <span className="text-sm">AI Suggestions</span>
                <Badge variant="outline">{performanceMetrics.memoryUsage.aiSuggestions}</Badge>
              </div>
            </div>

            <div className="space-y-2">
              <div className="flex items-center justify-between">
                <span className="text-sm">Total Items</span>
                <Badge variant="default">{performanceMetrics.memoryUsage.total}</Badge>
              </div>
              <Button 
                onClick={performanceMetrics.cleanup}
                variant="outline"
                size="sm"
                className="w-full"
              >
                <Database className="w-4 h-4 mr-2" />
                Cleanup Memory
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Integration Results */}
      <Card>
        <CardHeader>
          <CardTitle>Integration Results</CardTitle>
          <CardDescription>
            SuperContext system validation results
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h4 className="font-medium mb-3 text-green-600">✓ Successful Features</h4>
              <ul className="space-y-2 text-sm">
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  5-context architecture working
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Cross-context coordination
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Performance monitoring
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Memory management
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  TypeScript type safety
                </li>
                <li className="flex items-center gap-2">
                  <CheckCircle className="w-4 h-4 text-green-500" />
                  Batch operations
                </li>
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-3 text-blue-600">→ Next Steps</h4>
              <ul className="space-y-2 text-sm text-muted-foreground">
                <li>• Integrate with existing LinearCalendar</li>
                <li>• Connect to real Convex backend</li>
                <li>• Add persistence for context state</li>
                <li>• Implement context-aware routing</li>
                <li>• Add dev tools integration</li>
                <li>• Performance optimization</li>
              </ul>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

export default function ContextsPlayground() {
  return (
    <SuperContextProvider enablePerformanceMonitoring={true}>
      <ContextTestingInner />
    </SuperContextProvider>
  )
}